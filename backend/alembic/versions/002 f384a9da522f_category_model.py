"""Category model

Revision ID: f384a9da522f
Revises: cff23c3ffdd5
Create Date: 2025-04-22 12:49:03.630137

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "f384a9da522f"
down_revision: Union[str, None] = "cff23c3ffdd5"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "landlorddetails", "user_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "landlorddetails",
        "entity_type",
        existing_type=postgresql.ENUM("individual", "legal", name="entitytype"),
        type_=sa.Enum("INDIVIDUAL", "LEGAL", name="entitytypes", native_enum=False),
        existing_nullable=False,
    )
    op.alter_column(
        "landlorddetails",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        nullable=False,
    )
    op.alter_column(
        "landlorddetails",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        nullable=False,
    )
    op.alter_column(
        "users",
        "role",
        existing_type=postgresql.ENUM("client", "landlord", name="userrole"),
        type_=sa.Enum("CLIENT", "LANDLORD", name="userrole", native_enum=False),
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        nullable=False,
    )
    op.alter_column(
        "users",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "users",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        nullable=True,
    )
    op.alter_column(
        "users",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        nullable=True,
    )
    op.alter_column(
        "users",
        "role",
        existing_type=sa.Enum("CLIENT", "LANDLORD", name="userrole", native_enum=False),
        type_=postgresql.ENUM("client", "landlord", name="userrole"),
        existing_nullable=False,
    )
    op.alter_column(
        "landlorddetails",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        nullable=True,
    )
    op.alter_column(
        "landlorddetails",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        nullable=True,
    )
    op.alter_column(
        "landlorddetails",
        "entity_type",
        existing_type=sa.Enum(
            "INDIVIDUAL", "LEGAL", name="entitytypes", native_enum=False
        ),
        type_=postgresql.ENUM("individual", "legal", name="entitytype"),
        existing_nullable=False,
    )
    op.alter_column(
        "landlorddetails", "user_id", existing_type=sa.INTEGER(), nullable=True
    )
    # ### end Alembic commands ###
