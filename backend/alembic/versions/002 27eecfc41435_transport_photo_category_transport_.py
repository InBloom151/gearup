"""transport_photo, category, transport models

Revision ID: 27eecfc41435
Revises: cff23c3ffdd5
Create Date: 2025-04-22 14:11:40.126508

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "27eecfc41435"
down_revision: Union[str, None] = "cff23c3ffdd5"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "categories",
        sa.Column("name", sa.String(length=64), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(op.f("ix_categories_id"), "categories", ["id"], unique=False)
    op.create_table(
        "transports",
        sa.Column("landlord_id", sa.Integer(), nullable=False),
        sa.Column("category_id", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(length=128), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("price_per_day", sa.DECIMAL(precision=10, scale=2), nullable=True),
        sa.Column("price_per_month", sa.DECIMAL(precision=10, scale=2), nullable=True),
        sa.Column("price_per_year", sa.DECIMAL(precision=10, scale=2), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["category_id"], ["categories.id"], ondelete="RESTRICT"
        ),
        sa.ForeignKeyConstraint(["landlord_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_transports_category_id"), "transports", ["category_id"], unique=False
    )
    op.create_index(op.f("ix_transports_id"), "transports", ["id"], unique=False)
    op.create_index(
        op.f("ix_transports_landlord_id"), "transports", ["landlord_id"], unique=False
    )
    op.create_table(
        "transportphotos",
        sa.Column("transport_id", sa.Integer(), nullable=False),
        sa.Column("url", sa.String(length=256), nullable=False),
        sa.Column("is_primary", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["transport_id"], ["transports.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_transportphotos_id"), "transportphotos", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_transportphotos_transport_id"),
        "transportphotos",
        ["transport_id"],
        unique=False,
    )
    op.alter_column(
        "landlorddetails", "user_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "landlorddetails",
        "entity_type",
        existing_type=postgresql.ENUM("individual", "legal", name="entitytype"),
        type_=sa.Enum("INDIVIDUAL", "LEGAL", name="entitytypes", native_enum=False),
        existing_nullable=False,
    )
    op.alter_column(
        "landlorddetails",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        nullable=False,
    )
    op.alter_column(
        "landlorddetails",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        nullable=False,
    )
    op.alter_column(
        "users",
        "role",
        existing_type=postgresql.ENUM("client", "landlord", name="userrole"),
        type_=sa.Enum("CLIENT", "LANDLORD", name="userrole", native_enum=False),
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        nullable=False,
    )
    op.alter_column(
        "users",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "users",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        nullable=True,
    )
    op.alter_column(
        "users",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        nullable=True,
    )
    op.alter_column(
        "users",
        "role",
        existing_type=sa.Enum("CLIENT", "LANDLORD", name="userrole", native_enum=False),
        type_=postgresql.ENUM("client", "landlord", name="userrole"),
        existing_nullable=False,
    )
    op.alter_column(
        "landlorddetails",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        nullable=True,
    )
    op.alter_column(
        "landlorddetails",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        nullable=True,
    )
    op.alter_column(
        "landlorddetails",
        "entity_type",
        existing_type=sa.Enum(
            "INDIVIDUAL", "LEGAL", name="entitytypes", native_enum=False
        ),
        type_=postgresql.ENUM("individual", "legal", name="entitytype"),
        existing_nullable=False,
    )
    op.alter_column(
        "landlorddetails", "user_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.drop_index(op.f("ix_transportphotos_transport_id"), table_name="transportphotos")
    op.drop_index(op.f("ix_transportphotos_id"), table_name="transportphotos")
    op.drop_table("transportphotos")
    op.drop_index(op.f("ix_transports_landlord_id"), table_name="transports")
    op.drop_index(op.f("ix_transports_id"), table_name="transports")
    op.drop_index(op.f("ix_transports_category_id"), table_name="transports")
    op.drop_table("transports")
    op.drop_index(op.f("ix_categories_id"), table_name="categories")
    op.drop_table("categories")
    # ### end Alembic commands ###
